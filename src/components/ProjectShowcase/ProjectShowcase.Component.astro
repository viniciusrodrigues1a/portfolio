---
import { t } from "i18next";
import type { Project } from "../../projects/types";

import ButtonComponent from "@components/Button";
import TypographyComponent from "@components/Typography";
import TagComponent from "@components/Tag";
import showcaseFallbackImage from "../../assets/showcase-fallback.jpg";

type Props = {
  project: Project;
  url?: string;
};

const { project, url } = Astro.props as Props;

console.log(url);

const first3Techs = project.techStack.slice(0, 3);
const restOfTechs = project.techStack.slice(3, project.techStack.length);

const tagsContainerId = `project-${project.title}-tags-container`;
const seeProjectButtonId = `project-${project.title}-button`;
const moreTagsButtonId = `project-${project.title}-more-tags-button`;
const hiddenInputId = `project-${project.title}-expand-tags-input`;
---

<style>
  .project-showcase-container {
    position: relative;
    width: 100%;
    min-height: 18rem;
    aspect-ratio: 1.7;
    overflow: hidden;
    margin: 0 auto;
    border-radius: 1rem;
  }

  .project-showcase-content,
  .project-showcase-img,
  .project-showcase-img-overlay,
  .project-showcase-content-overlay {
    width: 100%;
    height: 100%;
  }

  .project-showcase-img {
    object-fit: cover;
  }

  .project-showcase-hover-detail {
    display: none;
  }

  .project-showcase-type {
    display: block;
  }

  .project-showcase-img-overlay {
    background-color: rgba(0, 0, 0, 0.6);
    position: absolute;
    top: 0px;
    left: 0px;
  }

  .project-showcase-content-overlay {
    position: absolute;
    top: 0px;
    left: 0px;
    padding: 2rem 1.75rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .project-showcase-type,
  .project-showcase-description {
    margin-top: 0.5rem;
  }

  .project-showcase-button-container {
    margin-top: 1rem;
  }

  .project-showcase-tech-stack-container {
    align-self: flex-end;
    display: grid;
    grid-template-areas: "a b c d";
    gap: 1rem;
    position: absolute;
    right: 1.75rem;
    bottom: 2rem;
    visibility: hidden;
  }

  .project-showcase-more-tags {
    position: relative;
  }

  .project-showcase-hidden-input:checked
    ~ *
    .project-showcase-more-tags-expanded {
    margi-top: 32rem;
    display: block;
  }

  .project-showcase-more-tags-expanded {
    position: absolute;
    padding: 1rem 1rem 2rem;
    width: 25rem;
    bottom: 2rem;
    right: -1rem;
    display: none;
  }

  .project-showcase-more-tags-expanded-content {
    background-color: var(--background1);
    border-radius: 0.25rem;
    padding: 1.25rem 1.5rem;
    min-height: 6rem;
    max-height: 8rem;
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    overflow-y: scroll;
  }

  .project-showcase-more-tags-expanded-content::after {
    content: "";
    position: absolute;
    bottom: 1rem;
    right: 2rem;
    width: 0px;
    height: 0px;
    border: 8px solid transparent;
    border-bottom: 0;
    border-top: 16px solid var(--background1);
  }

  .project-showcase-badge {
    pointer-events: none;
    position: absolute;
    top: -1rem;
    right: -0.75rem;
    background-color: var(--background);
    width: 28px;
    height: 28px;
    border-radius: 9999px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: -2px 2px 4px 1px rgba(0, 0, 0, 0.25);
    z-index: 1;
  }

  .project-showcase-hidden-input,
  .project-showcase-hidden-label {
    opacity: 0;
  }

  .project-showcase-hidden-input {
    position: absolute;
    bottom: 2rem;
    right: 1.75rem;
  }

  .project-showcase-hidden-label {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0px;
    left: 0px;
    z-index: 2;
    cursor: pointer;
  }

  @media (hover: hover) {
    .project-showcase-container:hover .project-showcase-img {
      transform: scale(1.25);
    }

    .project-showcase-container:hover .project-showcase-img-overlay {
      background-color: rgba(0, 0, 0, 0.7);
    }

    .project-showcase-container:hover .project-showcase-hover-detail {
      display: block;
    }

    .project-showcase-container:hover .project-showcase-type {
      display: none;
    }
  }

  @media (hover: none) {
    .project-showcase-img-overlay {
      background-color: rgba(0, 0, 0, 0.7);
    }

    .project-showcase-hover-detail {
      display: block;
    }
  }

  @media (min-width: 500px) {
    .project-showcase-tech-stack-container {
      visibility: visible;
    }

    .project-showcase-container {
      min-height: 24rem;
    }
  }

  @media (min-width: 1180px) {
    .project-showcase-container {
      min-height: 32rem;
    }
  }
</style>

<div class="project-showcase-container">
  <input
    class="project-showcase-hidden-input"
    id={hiddenInputId}
    type="checkbox"
    autocomplete="off"
    hidden
  />

  <div class="project-showcase-content">
    <img class="project-showcase-img" src={showcaseFallbackImage} />

    <div class="project-showcase-img-overlay"></div>

    <div class="project-showcase-content-overlay">
      <div>
        <TypographyComponent color="white" variant="h1-serif"
          >{project.title}</TypographyComponent
        >

        <TypographyComponent class="project-showcase-type" color="#DDDDDD"
          >{project.type} - {project.date}</TypographyComponent
        >

        <div class="project-showcase-hover-detail">
          <TypographyComponent
            class="project-showcase-description"
            color="#DDDDDD"
            set:html={project.shortDescription}
          />

          {
            url && (
              <div class="project-showcase-button-container">
                <ButtonComponent
                  id={seeProjectButtonId}
                  redirectTo={url}
                  redirectTarget="_self"
                  variant="text"
                  title={t("projects.seeProjectDetail")}
                  iconName="externalLink"
                  iconPosition="right"
                  fontWeight="normal"
                  color="var(--primary)"
                  iconSize={20}
                  showIcon
                  class="footer-button"
                />
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>

  <div class="project-showcase-tech-stack-container">
    {first3Techs.map((tech) => <TagComponent name={tech} />)}

    {
      project.techStack.length > 3 && (
        <div class="project-showcase-more-tags">
          <div>
            <div class="project-showcase-badge">
              <TypographyComponent>{restOfTechs.length}</TypographyComponent>
            </div>

            <ButtonComponent
              class="project-showcase-more-tags-button"
              variant="text"
              id={moreTagsButtonId}
            >
              <TagComponent
                iconName="moreHorizontal"
                badgeAmount={restOfTechs.length}
              />

              <label class="project-showcase-hidden-label" for={hiddenInputId}>
                {t("projects.expandProjectTags")}
              </label>
            </ButtonComponent>
          </div>

          <div class="project-showcase-more-tags-expanded">
            <div
              id={tagsContainerId}
              class="project-showcase-more-tags-expanded-content"
            >
              {restOfTechs.map((tech) => (
                <TagComponent name={tech} />
              ))}
            </div>
          </div>
        </div>
      )
    }
  </div>
</div>

<script define:vars={{ hiddenInputId, moreTagsButtonId, tagsContainerId }}>
  const expandedTagsContainer = document.querySelector(`#${tagsContainerId}`);
  const button = document.querySelector(`#${moreTagsButtonId}`);

  expandedTagsContainer?.addEventListener("click", (e) => e.stopPropagation());
  button?.addEventListener("click", (e) => e.stopPropagation());

  const input = document.querySelector(`#${hiddenInputId}`);

  if (input) {
    document.body.addEventListener("click", (e) => {
      const hasTargetedInput = e.target?.id === hiddenInputId;
      if (hasTargetedInput) {
        return;
      }

      input.checked = false;
    });
  }
</script>
