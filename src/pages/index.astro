---
import IconComponent from "@components/Icon";
import DefaultLayout from "@layouts/Default.Layout.astro";

import "../styles/pages/index/styles.css";
import {
  IntroSectionComponent,
  AboutMeSectionComponent,
  ExperienceSectionComponent,
  FooterComponent,
} from "@components/_page-components/home";
---

<DefaultLayout>
  <input
    type="text"
    value="viniciusrodrigues.aro@gmail.com"
    id="hidden-email-input"
    hidden
  />

  <div class="two-circles-icon-wrapper" hidden>
    <IconComponent
      name="twoCirclesPattern"
      color="var(--gradient-stop-color-0)"
      color1="var(--gradient-stop-color-1)"
    />
  </div>

  <IntroSectionComponent />

  <AboutMeSectionComponent />

  <ExperienceSectionComponent />

  <FooterComponent />
</DefaultLayout>

<script>
  const themeTag = "@viniciusrodrigues/theme";
  const themeSwitchInputElement = document.getElementById(
    "theme-switch-input"
  ) as HTMLInputElement | null;

  function setTheme(theme: "dark" | "light") {
    localStorage.setItem(themeTag, theme);

    if (!themeSwitchInputElement) {
      return;
    }

    themeSwitchInputElement.checked = theme === "dark" ? false : true;
  }

  function detectTheme() {
    const colorSchemeMediaMatches = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    const isPreferenceDarkTheme = localStorage.getItem(themeTag) === "dark";
    const prefersDarkMode =
      (colorSchemeMediaMatches && isPreferenceDarkTheme === null) ||
      isPreferenceDarkTheme;

    if (prefersDarkMode) {
      setTheme("dark");
    } else {
      setTheme("light");
    }
  }

  themeSwitchInputElement?.addEventListener("change", (e) => {
    const target = e.target as HTMLInputElement;
    const theme = target.checked ? "light" : "dark";

    setTheme(theme);
  });

  detectTheme();
</script>

<script>
  function showToast() {
    const toast = document.querySelector(".clipboard-toast-container");

    if (toast && toast.classList.contains("clipboard-hidden")) {
      toast?.classList.remove("clipboard-hidden");

      setTimeout(() => {
        toast?.classList.add("clipboard-hidden");
      }, 1000);
    }
  }

  function copyEmailToClipboard() {
    const textToCopy = document.getElementById("hidden-email-input") as
      | HTMLInputElement
      | undefined;

    if (textToCopy) {
      textToCopy.select();
      textToCopy.setSelectionRange(0, 99999);

      navigator.clipboard.writeText(textToCopy.value);

      showToast();
    }
  }

  const emailButtons = document.querySelectorAll(".email-clipboard-button");
  emailButtons.forEach((btn) => {
    btn.addEventListener("click", copyEmailToClipboard);
  });
</script>

<script>
  function interpolate(
    inputRange: number[],
    outputRange: number[],
    value: number
  ) {
    const [x1, x2] = inputRange;
    const [y1, y2] = outputRange;

    // Clamp the value within the input range
    const clampedValue = Math.max(x1, Math.min(x2, value));

    // Perform linear interpolation
    const interpolatedValue =
      y1 + ((clampedValue - x1) * (y2 - y1)) / (x2 - x1);

    return interpolatedValue;
  }

  function interpolateTranslationByScroll() {
    const halfViewport = window.innerHeight / 2;

    const lowerTranslateBound = 0;
    const upperTranslateBound = 150;

    return interpolate(
      [0, halfViewport],
      [lowerTranslateBound, upperTranslateBound],
      window.scrollY
    );
  }

  function animateElement(
    element: HTMLElement | null,
    elementInner: HTMLElement | null
  ) {
    if (!element || !elementInner) {
      return;
    }

    elementInner.classList.remove("no-animation");

    const translateByPixelAmount = -interpolateTranslationByScroll();
    element.style.transform = `translateY(${translateByPixelAmount}px)`;
  }

  function removeAnimationForElement(
    element: HTMLElement | null,
    elementInner: HTMLElement | null
  ) {
    if (!element || !elementInner) {
      return;
    }

    elementInner.classList.add("no-animation");
    element.style.transform = "translateY(0px)";
  }

  const flower = document.getElementById("flower");
  const flowerInner = document.getElementById("flower-inner");
  const thumbsUp = document.getElementById("thumbs-up");
  const thumbsUpInner = document.getElementById("thumbs-up-inner");
  const clock = document.querySelector(".clock") as HTMLElement | null;
  const clockInner = document.querySelector(
    ".clock-inner"
  ) as HTMLElement | null;

  function handleScroll() {
    const threshold = 50;
    if (window.scrollY > threshold) {
      animateElement(flower, flowerInner);
      animateElement(thumbsUp, thumbsUpInner);
      animateElement(clock, clockInner);
    } else {
      removeAnimationForElement(flower, flowerInner);
      removeAnimationForElement(thumbsUp, thumbsUpInner);
      removeAnimationForElement(clock, clockInner);
    }
  }

  window.addEventListener("scroll", handleScroll);
</script>
